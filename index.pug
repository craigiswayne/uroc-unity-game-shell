doctype html
-
    const cache_bust_query = Date.now().toString();
html(lang='en-us')
    head
        title {{{ PRODUCT_NAME }}}
        meta(charset='utf-8')
        meta(http-equiv='Content-Type' content='text/html; charset=utf-8')
        meta(name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no")
        link(rel='shortcut icon' href='https://ik.imagekit.io/bmp6bnlpn/uroc/uroc-logo-primary.svg?updatedAt=1750776072240')
        |
        | #if SHOW_DIAGNOSTICS
        link(rel='stylesheet' href!='<<<TemplateData/diagnostics.css>>>')
        script(src!='<<<TemplateData/diagnostics.js>>>')
        |
        | #endif
        script(src='https://cdn.jsdelivr.net/npm/lil-gui@0.20.0/dist/lil-gui.umd.min.js')
        link(href='https://cdn.jsdelivr.net/npm/lil-gui@0.20.0/dist/lil-gui.min.css' rel='stylesheet')
        |
        script(src=`TemplateData/shell.min.js?v=${cache_bust_query}`)
        link(rel='stylesheet' href=`TemplateData/shell.min.css?v=${cache_bust_query}`)
        script(type='module' src=`TemplateData/force-tool.js?v=${cache_bust_query}` defer='')
    body
        #unity-container.unity-desktop
            canvas#unity-canvas(width='{{{ WIDTH }}}' height='{{{ HEIGHT }}}' tabindex='-1')
            include views/splash

            |
            | #if SHOW_DIAGNOSTICS
            |
            img#diagnostics-icon(src='TemplateData/webmemd-icon.png')
            |
            | #endif
        include views/quick_actions_menu
        include views/bet_levels_modal
        include views/game_rules_modal
        include views/language_modal
        include views/error_modal
        include views/quit_modal
        include views/rotate_to_landscape
        include views/unity_product_version_label
        script.
            var canvas = document.querySelector('#unity-canvas');
            function unityShowBanner(msg, type) {
                GameShell.show_error_popup(msg);
            }
            var buildUrl = 'Build';
            var loaderUrl = buildUrl + '/{{{ LOADER_FILENAME }}}';
            var config = {
                arguments: [],
                dataUrl: buildUrl + '/{{{ DATA_FILENAME }}}',
                frameworkUrl: buildUrl + '/{{{ FRAMEWORK_FILENAME }}}',
            #if USE_THREADS
                workerUrl: buildUrl + '/{{{ WORKER_FILENAME }}}',
            #endif
            #if USE_WASM
                codeUrl: buildUrl + '/{{{ CODE_FILENAME }}}',
            #endif
            #if SYMBOLS_FILENAME
                symbolsUrl: buildUrl + '/{{{ SYMBOLS_FILENAME }}}',
            #endif
                streamingAssetsUrl: 'StreamingAssets',
                companyName: {{{ JSON.stringify(COMPANY_NAME) }}},
                productName: {{{ JSON.stringify(PRODUCT_NAME) }}},
                productVersion: {{{ JSON.stringify(PRODUCT_VERSION) }}},
                showBanner: unityShowBanner,
                matchWebGLToCanvasSize: true
            };
            if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
                document.querySelector('#unity-container').className = 'unity-mobile';
                canvas.className = 'unity-mobile';
            #if SHOW_DIAGNOSTICS
                    // position the diagnostics icon in the corner on the canvas
                let diagnostics_icon = document.getElementById('diagnostics-icon');
                diagnostics_icon.style.position = 'fixed';
                diagnostics_icon.style.bottom = '10px';
                diagnostics_icon.style.right = '0px';
                canvas.after(diagnostics_icon);
            #endif
            }
            #if BACKGROUND_FILENAME
                canvas.style.background = "url('" + buildUrl + "/{{{ BACKGROUND_FILENAME.replace(/'/g, '%27') }}}') center / cover";
            #endif
            document.querySelector('#splash').style.display = 'block';
            var script = document.createElement('script');
            script.src = loaderUrl;
            script.onload = () => {
                createUnityInstance(canvas, config, (progress)=>{
                    if(!GameShell){
                        return;
                    }
                    GameShell.unity_progress = progress;
                    GameShell.update_progress_loader();
                })
                .then(GameShell.init)
                .catch((message) => {
                    alert(message);
                });
            };
            document.body.appendChild(script);

